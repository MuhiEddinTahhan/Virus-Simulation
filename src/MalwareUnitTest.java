import Skeleton.SimulationInput;
import Skeleton.StatisticsContainer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * this class is used to write different kinds of tests for the MalwareUnit class
 */
public class MalwareUnitTest {

    /**
     * this the constructor for the test class
     */
    public MalwareUnitTest() {}

    /**
     * the function tests a basic functionality of the MalwareUnit class.
     * the result should show 20 actions that were done and 1 active unit (because there is 1 IP).
     */
    public void testBasicFunctionality() {
        SimulationInput input = new SimulationInput();
        input.addInput("Time", List.of("10")); // 10 seconds
        input.addInput("ActionsPerSecond", List.of("2")); // 2 actions per second
        input.addInput("TargetIPs", List.of("192.168.1.100"));

        StatisticsContainer stats = Main.runTest(input);
        stats.printStatisticsContainer();
    }

    /**
     * this test targets the concurrency where we want to run the simulation on multiple IPs. it should give 5 actions with 2 active units indicating 10 actions each virus
     */
    public void testConcurrency() {
        SimulationInput input = new SimulationInput();
        input.addInput("Time", List.of("5")); // 5 seconds
        input.addInput("ActionsPerSecond", List.of("1")); // 1 action per second
        input.addInput("TargetIPs", List.of("192.168.1.103", "192.168.1.102")); // Two IPs

        StatisticsContainer stats = Main.runTest(input);
        stats.printStatisticsContainer();
    }

    /**
     * the test targets the stress that can be applied to the class where we asked for 10 actions per second and gave it 1 time to run.
     * the test should result in 10 actions for each virus with 3 active units for each virus indicating 30 actions.
     */
    public void testStress() {
        SimulationInput input = new SimulationInput();
        input.addInput("Time", List.of("1")); // 1 second
        input.addInput("ActionsPerSecond", List.of("10")); // 10 actions per second
        input.addInput("TargetIPs", List.of("192.168.1.100", "192.168.1.101", "192.168.1.102"));

        StatisticsContainer stats = Main.runTest(input);
        stats.printStatisticsContainer();
    }

    /**
     * here we test the edge case where we gave the class an empty input and 0 times to run. there should be no active units nor any activities
     */
    public void testEdgeCases() {
        SimulationInput input = new SimulationInput();
        input.addInput("Time", List.of("0")); // No time to perform actions
        input.addInput("ActionsPerSecond", List.of("1"));
        input.addInput("TargetIPs", List.of()); // No IPs

        StatisticsContainer stats = Main.runTest(input);
        stats.printStatisticsContainer();

        // here is a normal test where it should give 1 action and 4 of the same IP. this means there should be 4 active units per virus with 1 action each since it is the same IP
        input.setInputArray(new ArrayList<>()); // Reset input
        input.addInput("Time", List.of("1"));
        input.addInput("ActionsPerSecond", List.of("1"));
        input.addInput("TargetIPs", Collections.nCopies(4, "192.168.1.100")); // Simulate high volume of IPs

        stats = Main.runTest(input);
        stats.printStatisticsContainer();
    }

    /**
     * the class tests the case where if there is time for the simulation and no list of IPs. in this case I put 2 seconds, therefore there should be 2 new IPs.
     * and that should result in 2 active units and 2 actions per unit
     */
    public void testIPGeneratorClass() {
        SimulationInput input = new SimulationInput();
        input.addInput("Time", List.of("2")); // 2 seconds
        input.addInput("ActionsPerSecond", List.of("1"));
        input.addInput("TargetIPs", List.of()); // No IPs

        StatisticsContainer stats = Main.runTest(input);
        stats.printStatisticsContainer();
    }
}
